include("Items");

class Entity {
	private id;
	private name;
	private stats;
	private chips;

	constructor(id) {
		this.id = id;
		this.name = getName(this.id);
		this.stats = new Stats(this.id);
		this.chips = new Map();
		arrayIter(getChips(this.id), chipId => {
			var chip = new Chip(chipId, this.id);
			mapPut(this.chips, chip.getId(), chip);
		});
	}
	public getId() {return this.id;}
	public getPosition() {return getCell(this.id);}
	public getName() {return this.name;}
	public getStats() {return this.stats;}
	public getChips() {return this.chips;}
	public getChip(chipId) {return mapGet(this.chips, chipId);}
	public isAlive() {return isAlive(this.id);}
	public calulateDamageTaken(baseDamage) {
		return baseDamage * (1 - this.stats.getRelativeShield(this.id) / 100) - this.stats.getAbsoluteShield(this.id);
	}
	public moveToward(target) {
		if(target instanceof Entity) moveTowardCell(target.getPosition());
		else moveTowardCell(target);
	}
	public moveAway(target) {
		if(target instanceof Entity) moveAwayFrom(target.getId());
		else moveAwayFromCell(target);
	}
}

class Leek extends Entity {
	private weapons;
	private equipedWeapon;
	constructor(id) {
		super(id);
		this.weapons = new Map();
		arrayIter(getWeapons(this.getId()), weaponId => {
			var weapon = new Weapon(weaponId, this.getId());
			mapPut(this.weapons, weapon.getId(), weapon);
		});
		this.equipedWeapon = new Weapon(getWeapon(this.getId()), this.getId());
	}
	public getWeapons() {return this.weapons;}
	public getWeapon(weaponId) {return mapGet(this.weapons, weaponId);}
	public getEquipedWeapon() {return this.equipedWeapon}
	public equipWeapon(weapon) {
		if(typeOf(weapon) == TYPE_NUMBER) weapon = this.getWeapon(weapon);
		if(this.equipedWeapon != null && this.equipedWeapon.getId() == weapon.getId()) return;
		setWeapon(weapon.getId());
		this.equipedWeapon = weapon;
	}
	public getItem(itemId) {
		if(isChip(itemId)) return this.getChip(itemId);
		else if(isWeapon(itemId)) return this.getWeapon(itemId);
		else return null;
	}
}

class Bulb extends Entity {
	constructor(id) { super(id); }
	getItem(itemId) {
		if(isChip(itemId)) return this.getChip(itemId);
		else return null;
	}
}

class Turret extends Entity {
	constructor(id) { super(id); }
	getItem(itemId) {
		if(isChip(itemId)) return this.getChip(itemId);
		else return null;
	}
}

class Chest extends Entity {
	constructor(id) { super(id); }
}

class Stats {
	private id;
	constructor(idEntity) {this.id=idEntity;}
	public getTotalLife(){return getTotalLife(this.id);}
	public getLife(){return getLife(this.id);}
	public getScience(){return getScience(this.id);}
	public getStrength(){return getStrength(this.id);}
	public getMagic(){return getMagic(this.id);}
	public getWisdom(){return getWisdom(this.id);}
	public getFrequency(){return getFrequency(this.id);}
	public getAgility(){return getAgility(this.id);}
	public getResistance(){return getResistance(this.id);}
	public getRelativeShield(){return getRelativeShield(this.id);}
	public getAbsoluteShield(){return getAbsoluteShield(this.id);}
	public getMP(){return getMP(this.id);}
	public getTP(){return getTP(this.id);}
}

function retrieveAllAliveEnemies() {
	return arrayMap(getAliveEnemies(), id => buildEntity(id));
}
function retrieveAllEnemies() {
	return arrayMap(getEnemies(), id => buildEntity(id));
}
function retrieveAllAliveAllies() {
	return arrayMap(getAliveEnemies(), id => buildEntity(id));
}
function retrieveAllAllies() {
	return arrayMap(getEnemies(), id => buildEntity(id));
}
function retrieveMe() {
	return buildEntity(getEntity());
}

function retrieveNearestLeek(source, enemies) {
	var sourcePos = source.getPosition();
	return arraySort(enemies, (e1, e2) =>
					 e1 instanceof Leek && getPathLength(sourcePos, e1) >= getPathLength(sourcePos, e2)
					)[0];
}

function buildEntity(id) {
	if (getType(id) == ENTITY_LEEK)			{ return new Leek(id); }
	else if (getType(id) == ENTITY_BULB)	{ return new Bulb(id); }
	else if (getType(id) == ENTITY_TURRET)	{ return new Turret(id); }
	else if (getType(id) == ENTITY_CHEST)	{ return new Chest(id); }
}
